generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums provide type-safety for specific fields
enum Role {
  ENTREPRENEUR
  INVESTOR
}

enum DealStatus {
  REVIEWING
  INTERESTED
  SHORTLISTED
  DECLINED
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  role      Role      // Changed to Enum
  bio       String?
  location  String?
  createdAt DateTime  @default(now())

  // Relations
  startups        Startup[]
  dealsAsInvestor Deal[]    @relation("InvestorDeals")
  sentMessages    Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  events          Event[]   @relation("UserEvents")
}

model Startup {
  id            String   @id @default(uuid())
  name          String
  industry      String   // Made required for data quality
  fundingNeeded Int      // Made required for data quality
  pitchDeckUrl  String?
  createdAt     DateTime @default(now())

  // Relations
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  deals     Deal[]
}

model Deal {
  id         String     @id @default(uuid())
  status     DealStatus @default(REVIEWING) // Changed to Enum
  notes      String?
  createdAt  DateTime   @default(now())

  // Relations
  startup    Startup    @relation(fields: [startupId], references: [id])
  startupId  String
  investor   User       @relation("InvestorDeals", fields: [investorId], references: [id])
  investorId String
  messages   Message[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  sentAt    DateTime @default(now())

  // Relations
  deal        Deal     @relation(fields: [dealId], references: [id])
  dealId      String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId  String // Added receiver for clarity
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String?
  eventDate   DateTime
  createdAt   DateTime @default(now())

  // Relations
  createdBy   User     @relation("UserEvents", fields: [createdById], references: [id])
  createdById String
}